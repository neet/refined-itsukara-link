type Content {
  # ID of the content
  id: ID!
  # Name of the content
  name: String!
  # Description of the streaming
  description: String!
  # Whether public
  public: Int!
  # URL of the content
  url: String!
  # Thumbnail of the content
  thumbnail: String!
  # Start date time on ISO 8601
  startDate: String!
  # End date time on ISO 8601
  endDate: String!
  # Whether the streaming is recommended for the user
  recommend: Boolean!
  # Sources of the content
  streamers: [Streamer!]!
  # Associated category
  category: Category
  # Matched group
  group: Group
}

type Streamer {
  # ID of the streamer
  id: ID!
  # Name of the streamer
  name: String!
  # Romanized name of the streamer
  latinName: String!
  # Ruby for name of the streamer
  ruby: String!
  # URL of the avatar for the streamer
  avatar: String!
  # Hex colour code
  color: String!
  # Description of the streamer
  description: String!
  # If the  streamer is public
  public: Int!
  # Unknown...
  position: Int!
  # External services' information
  socialAccounts: [SocialAccount!]!
  # Involved groups
  groups: [Group!]!
}

type Group {
  # ID of the group
  id: ID!
  # Name of the group
  name: String!
  # Involved streamers
  members: [Streamer!]!
}

type Category {
  # ID of the category
  id: ID!
  # name
  name: String!
}

interface SocialAccount {
  # Internal ID of the channel
  id: ID!
  # Associated streamer id
  streamerId: ID!
}

type YoutubeChannel implements SocialAccount {
  # Internal ID of the channel
  id: ID!
  # Associated streamer id
  streamerId: ID!
  # ID of the channel
  channel: ID!
  # Name of the channel
  channelName: String!
  # Order of creation
  creationOrder: Int!
}

type TwitterAccount implements SocialAccount {
  # Internal ID of the channel
  id: ID!
  # Associated streamer id
  streamerId: ID!
  # Screenname of the account like @twitter
  screenName: String!
}

type Query {
  content(id: ID!): Content
  contents: [Content!]!
  streamer(id: ID!): Streamer
  streamers: [Streamer!]!
  category(id: ID!): Category
  categories: [Category!]!
  group(id: ID!): Group
  groups: [Group!]!
}

schema {
  query: Query
}
