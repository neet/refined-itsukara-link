type Content {
  # ID of the content
  id: ID!
  # Name of the content
  name: String!
  # Description of the streaming
  description: String!
  # Whether public
  public: Int!
  # URL of the content
  url: String!
  # Thumbnail of the content
  thunbnail: String!
  # Start date time on ISO 8601
  startDate: String!
  # End date time on ISO 8601
  endDate: String!
  # Whether the streaming is recommended for the user
  recommend: Boolean!
  # Sources of the content
  sources: [Source!]!
  # Associated genre
  genre: Genre
}

type Source {
  # ID of the source
  id: ID!
  # Name of the source
  name: String!
  # Romanized name of the source
  latinName: String!
  # Ruby for name of the source
  ruby: String!
  # URL of the avatar for the source
  avatar: String!
  # Hex colour code
  color: String!
  # Description of the source
  description: String!
  # If the source is public
  public: Int!
  # Unknown...
  position: Int!
  # External services' information
  socialAccounts: [SocialAccount!]!
}

type Genre {
  # ID of the genre
  id: ID!
  # name
  name: String!
}

interface SocialAccount {
  # Internal ID of the channel
  id: ID!
  # Associated source id
  source: ID!
}

type YoutubeChannel implements SocialAccount {
  # Internal ID of the channel
  id: ID!
  # Associated source id
  source: ID!
  # ID of the channel
  channel: ID!
  # Name of the channel
  channelName: String!
  # Order of creation
  creationOrder: Int!
}

type TwitterAccount implements SocialAccount {
  # Internal ID of the channel
  id: ID!
  # Associated source id
  source: ID!
  # Screenname of the account like @twitter
  screenName: String!
}

type Query {
  content(id: ID!): Content
  contents: [Content!]!
  source(id: ID!): Source
  sources: [Source!]!
  genre(id: ID!): Genre
  genres: [Genre!]!
}

schema {
  query: Query
}
