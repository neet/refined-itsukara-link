interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

type Activity implements Node {
  # ID of the activity
  id: ID!
  # Name of the activity
  name: String!
  # Description of the streaming
  description: String!
  # Whether public
  public: Int!
  # URL of the activity
  url: String!
  # Thumbnail of the activity
  thumbnail: String!
  # Start date time on ISO 8601
  startAt: String!
  # End date time on ISO 8601
  endAt: String!
  # Whether the streaming is recommended for the user
  recommend: Boolean!
  # Sources of the activity
  performers: [Performer!]!
  # Associated category
  category: Category
  # Matched team
  team: Team
}

type ActivityConnection {
  edges: [ActivityEdge]!
  nodes: [Activity]!
  pageInfo: PageInfo!
}

type ActivityEdge {
  cursor: String
  node: Activity
}

type Performer implements Node {
  # ID of the performer
  id: ID!
  # Name of the performer
  name: String!
  # Romanized name of the performer
  latinName: String!
  # Ruby for name of the performer
  ruby: String!
  # URL of the avatar for the performer
  avatar: String!
  # Hex colour code
  color: String!
  # Description of the performer
  description: String!
  # If the  performer is public
  public: Int!
  # Unknown...
  position: Int!
  # External services' information
  socialAccounts: [SocialAccount!]!
  # Involved teams
  teams: [Team!]!
}

type PerformerConnection {
  edges: [PerformerEdge]!
  nodes: [Performer]!
  pageInfo: PageInfo!
}

type PerformerEdge {
  cursor: String
  node: Performer
}

type Team implements Node {
  # ID of the team
  id: ID!
  # Name of the team
  name: String!
  # Involved performers
  members: [Performer!]!
}

type TeamConnection {
  edges: [TeamEdge]!
  nodes: [Team]!
  pageInfo: PageInfo
}

type TeamEdge {
  cursor: String
  node: Team
}

type Category implements Node {
  # ID of the category
  id: ID!
  # name
  name: String!
}

type CategoryConnection {
  edges: [CategoryEdge]!
  nodes: [Category]!
  pageInfo: PageInfo!
}

type CategoryEdge {
  cursor: String
  node: Category
}

interface SocialAccount {
  # Internal ID of the channel
  id: ID!
  # Associated performer id
  performerId: ID!
}

type YoutubeAccount implements Node & SocialAccount {
  # Internal ID of the channel
  id: ID!
  # Associated performer id
  performerId: ID!
  # ID of the channel
  channel: ID!
  # Name of the channel
  channelName: String!
  # Order of creation
  creationOrder: Int!
}

type TwitterAccount implements Node & SocialAccount {
  # Internal ID of the channel
  id: ID!
  # Associated performer id
  performerId: ID!
  # Screenname of the account like @twitter
  screenName: String!
}

type Query {
  activity(id: ID!): Activity

  activities(
    first: Int
    after: String
    last: Int
    before: String
  ): ActivityConnection!

  performer(id: ID!): Performer

  performers(
    first: Int
    after: String
    last: Int
    before: String
  ): PerformerConnection!

  category(id: ID!): Category

  categories(
    first: Int
    after: String
    last: Int
    before: String
  ): CategoryConnection!

  team(id: ID!): Team

  teams(first: Int, after: String, last: Int, before: String): TeamConnection!
}

schema {
  query: Query
}
